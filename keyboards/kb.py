# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
from rich import print

from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                           InlineKeyboardMarkup, InlineKeyboardButton,
                           ReplyKeyboardRemove)
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder


main = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")],
    [KeyboardButton(text="–ü–æ–∏—Å–∫üîé"), KeyboardButton(text="–†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞")]
],
                            resize_keyboard=True,
                            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω—Ç–∫ –º–µ–Ω—é.")


office = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å"), KeyboardButton(text="–ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω")],
    [KeyboardButton(text="–ú–æ–∏ –æ—Ç–≤–µ—Ç—ã"), KeyboardButton(text="–ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã")]
],
                            resize_keyboard=True,
                            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω—Ç–∫ –º–µ–Ω—é.")


# ------------------------------------------------------------
search = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º"), KeyboardButton(text="–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º")], 
    [KeyboardButton(text="–ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω")]
],
                            resize_keyboard=True,)


created_request_inline = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="change"), InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="delet")],
])
# -----------------------------------------------------------


answer = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å"), KeyboardButton(text="–ù–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω")]
],
                            resize_keyboard=True,
                            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω—Ç–∫ –º–µ–Ω—é.")


change_request_inline = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–¢–µ–º–∞", callback_data="change_title"), InlineKeyboardButton(text="–¢—ç–≥", callback_data="tags")],
        [InlineKeyboardButton(text="–¢–µ–∫—Å—Ç", callback_data="text")],
])


def profile(text: str | list):
    builder = ReplyKeyboardBuilder()

    if isinstance(text, str):
        text = [text]

    [builder.button(text=txt[1]) for txt in text]
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)


def my_requests(text: str | list):
    builder = InlineKeyboardBuilder()
    print(text)
    [builder.row(InlineKeyboardButton(text=f"{txt[1]}", callback_data=f"REQ {txt[0]}")) for txt in text ]
    return builder.adjust(2).as_markup()


def list_requests(text: str | list):
    builder = InlineKeyboardBuilder()
    print(text)
    [builder.row(InlineKeyboardButton(text=f"{txt[3]}", callback_data=f"FIND {txt[0]}")) for txt in text ]
    return builder.adjust(2).as_markup()


def interact_request(text: str | list):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"EDIT {text}"),
        InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"DEL {text}"),
    )
    return builder.as_markup()


def set_answer(text: str | list):
    builder = InlineKeyboardBuilder()
    print("kb 89 \n \n \n")
    print(text)

    builder.row(
        InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"S_ANSWER {text[0]}"),
        InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å—Ç –æ—Ç–≤–µ—Ç—ã", callback_data=f"W_ANSWER {text[0]}"),
    )
    return builder.adjust(2).as_markup()


def edit_request_inline(text):
    builder = InlineKeyboardBuilder()
    print(text)
    builder.row(
        InlineKeyboardButton(text="–ó–∞–≥–æ–ª–æ–≤–æ–∫", callback_data=f"TITLE {text[0]}"),
        InlineKeyboardButton(text="–¢–µ–∫—Å—Ç", callback_data=f"TEXT {text[0]}"),
        InlineKeyboardButton(text="–¢—ç–≥–∏", callback_data=f"TAGS {text[0]}"), width=2
    )
    
    return builder.as_markup()

rmk = ReplyKeyboardRemove()