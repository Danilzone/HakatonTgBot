
import ast
from aiogram  import Router, F, types
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command, CommandObject, CommandStart

from aiogram.fsm.context import FSMContext
from utils.states import GetReqEdit
from utils.states import Form, Search,SearchByTags, SetAnswer, EditMyAnswer, Create

from keyboards import kb
from rich import print
from data.database import WorkDB

from keyboards.kb import my_requests
from rich.console import Console

db = WorkDB("./data/main.db")

router = Router()

console = Console()


@router.message(CommandStart())
async def start(message : Message):
    await message.answer(f"Hi <b>{message.from_user.full_name}</b>", reply_markup=kb.main)

    db.setUser(message.from_user.id, message.from_user.full_name, "@" + message.from_user.username)    
    # db.setRequest(message.from_user.id, message.from_user.full_name, "@" + message.from_user.username, "–ú–∞–π–Ω–∏–Ω–≥", "–ö–∞–∫ –≤ –ø–∏—Ç–æ–Ω–µ —Å–¥–µ–ª–∞—Ç—å –º–∞–π–Ω–µ—Ä?")
    # db.getRequests()


@router.message(F.text.lower() == "–Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω")
async def cmd_refund(message: Message):
    await message.reply(f"–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç",
                        reply_markup=kb.main)


@router.message(F.text.lower() == "–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def cmd_refund(message: Message):
    await message.reply(f"–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç",
                        reply_markup=kb.office)


@router.message(F.text.lower() == "–º–æ–∏ –∑–∞–ø—Ä–æ—Å—ã")
async def cmd_refund(message: Message):
    try:
        res_db = db.getRequests(message.from_user.id)[1]
        await message.reply(f"–≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å", reply_markup=my_requests(res_db) )
    except Exception:
        console.print_exception(show_locals=True)


@router.message(F.text.lower() == "–º–æ–∏ –æ—Ç–≤–µ—Ç—ã")
async def my_answers(message: Message):
    try:
        res_db = db.getMyAnswers(message.from_user.id)
        print(res_db)
        if not res_db:
            await message.answer("–í—ã –µ—â–µ –Ω–µ –æ—Ç–≤–µ—á–∞–ª–∏ –Ω–∏ –Ω–∞ –∫–∞–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã")
        else:
            for my_answer in res_db:
                await message.answer(f"üí†<u>—Ç–µ–º–∞</u>: {my_answer[1]}\n ‚Ä¢ <u>–í–∞—à –æ—Ç–≤–µ—Ç</u>: {my_answer[2]}\n", reply_markup=kb.interact_answer(my_answer[0]))
    except Exception:
        console.print_exception(show_locals=True)


@router.message(F.text.lower() == "—Ä–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞")
async def cmd_refund(message: Message):
    await message.reply(f"–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç",
                        reply_markup=kb.answer)



# –¢—É—Ç –º—ã –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –∏ –≤—ã–≤–æ–¥–∏–º –∏–∑ –±–¥ –Ω—É–∂–Ω—ã–π '–∑–∞–ø—Ä–æ—Å'


@router.message(F.text.lower() == "—Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å")
async def fill_profile(message: Message, state: FSMContext):
    await state.set_state(Create.request_title)
    await message.answer(
        "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º!\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞", 
    )


@router.message(Create.request_title)
async def fill_profile(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(Create.request_text)
    await message.answer(
        "–•–æ—Ä–æ—à–æ!\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Å–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞",
    )


@router.message(Create.request_text)
async def fill_profile(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    await state.set_state(Create.request_tags)
    await message.answer(
        "–û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ.\n–£–∫–∞–∂–∏ —Ç–µ–≥–∏ –¥–ª—è —Å–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞\n \n–ü—Ä–∏–º–µ—Ä: <code>–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ø–∑—ã–∫–∏, –ü—Ä–æ–±–ª–µ–º–∞</code>",
    )


@router.message(Create.request_tags)
async def fill_profile(message: Message, state: FSMContext):
    await state.update_data(tags=message.text)
    data = await state.get_data()
    await state.clear()
    request_title = data.get("title")
    request_text = data.get("text")
    request_tags = data.get("tags")
    try: 
        db.setRequest(f"{message.from_user.id}", f"{message.from_user.full_name}", f"@{message.from_user.username}", f"{request_title}", f"{request_text}", f"{request_tags}")
        await message.answer(
            f"<b>–í–∞—à –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω‚úÖ:</b>\n    üí†—Ç–µ–º–∞:  <u>{request_title}</u>\n    ‚Ä¢  {request_text}\n \n    –¢–µ–≥–∏: <code>{request_tags}</code>", 
        )
    except Exception:
        console.print_exception(show_locals=True)
