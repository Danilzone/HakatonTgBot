from aiogram  import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandObject, CommandStart

from keyboards import kb
from rich import print
from data.database import WorkDB

from keyboards.kb import my_requests
from rich.console import Console

db = WorkDB("./data/main.db")

router = Router()

console = Console()


@router.message(CommandStart())
async def start(message : Message):
    await message.answer(f"Hi <b>{message.from_user.full_name}</b>", reply_markup=kb.main)

    # db.setUser(message.from_user.id, message.from_user.full_name, "@" + message.from_user.username)    
    # db.setRequest(message.from_user.id, message.from_user.full_name, "@" + message.from_user.username, "–ú–∞–π–Ω–∏–Ω–≥", "–ö–∞–∫ –≤ –ø–∏—Ç–æ–Ω–µ —Å–¥–µ–ª–∞—Ç—å –º–∞–π–Ω–µ—Ä?")
    # db.getRequests()


@router.message(F.text.lower() == "–Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω")
async def cmd_refund(message: Message):
    await message.reply(f"–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç",
                        reply_markup=kb.main)


@router.message(F.text.lower() == "–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def cmd_refund(message: Message):
    await message.reply(f"–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç",
                        reply_markup=kb.office)


@router.message(F.text.lower() == "–º–æ–∏ –∑–∞–ø—Ä–æ—Å—ã")
async def cmd_refund(message: Message):
    try:
        res_db = db.getRequests(message.from_user.id)[1]
        await message.reply(f"–≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å", reply_markup=my_requests(res_db) )
    except Exception:
        console.print_exception(show_locals=True)


@router.message(F.text.lower() == "–∑–∞–ø—Ä–æ—Å—ã")
async def cmd_refund(message: Message):
    await message.reply(f"–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç",
                        reply_markup=kb.requests)


@router.message(F.text.lower() == "—Ä–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞")
async def cmd_refund(message: Message):
    await message.reply(f"–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç",
                        reply_markup=kb.answer)


# –¢—É—Ç –º—ã –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –∏ –≤—ã–≤–æ–¥–∏–º –∏–∑ –±–¥ –Ω—É–∂–Ω—ã–π '–∑–∞–ø—Ä–æ—Å'

@router.callback_query(F.data[:4] == "REQ ")
async def callback(call: CallbackQuery):
    print(call.data[4:])
    request = db.getRequest(call.from_user.id, call.data[4:])
    await callback.answer("–ó–∞–≥—Ä—É–∑–∫–∞")
    await call.message.answer(f"üí†—Ç–µ–º–∞: <u>{request[0]}</u>\n‚Ä¢ {request[1]}", reply_markup=kb.interact_request)


# @router.message()
# async def cmds(message: Message):
#     msg = message.text.lower()
#     if msg == "–Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω":
#          await message.reply(f"–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç",
#                      reply_markup=kb.main)

#     elif msg == "–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç":
#         await message.reply(f"–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç",
#                             reply_markup=kb.office)    

#     elif msg == "–∑–∞–ø—Ä–æ—Å—ã":
#         await message.reply(f"–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç",
#                           reply_markup=kb.requests)

#     elif msg == "—Ä–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞":
#         await message.reply(f"–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç",
#                             reply_markup=kb.answer)
    
#     elif msg == "–º–æ–∏ –∑–∞–ø—Ä–æ—Å—ã":
#         try:
#             res_db = db.getRequests(message.from_user.id)[1]
#             await message.reply(f"–≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å", reply_markup=my_requests(res_db) )
#         except Exception:
#             console.print_exception(show_locals=True)


"""
–†–∞–±–æ—Ç–∞ —Å –ë–î

db.getRequest(—é–∑–µ—Ä_id, id_–∑–∞–ø—Ä–æ—Å–∞)  -> –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
db.getRequests(—é–∑–µ—Ä_id)             -> –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 

db.setRequest(—é–∑–µ—Ä_id, –∏–º—è_—é–∑–µ—Ä–∞, —Å–æ–±–∞—á–∫–∞_—é–∑–µ—Ä–∞, –∑–∞–≥–æ–ª–æ–≤–æ–∫_–∑–∞–ø—Ä–æ—Å–∞, —Ç–µ–∫—Å—Ç_–∑–∞–ø—Ä–æ—Å–∞)            -> –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—å—é 

"""