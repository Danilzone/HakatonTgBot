
import ast
from aiogram  import Router, F, types
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command, CommandObject, CommandStart

from aiogram.fsm.context import FSMContext
from utils.states import GetReqEdit
from utils.states import Form, Search,SearchByTags, SetAnswer, EditMyAnswer, Create
from bot import bot
from keyboards import kb
from rich import print
from data.database import WorkDB

from keyboards.kb import my_requests
from rich.console import Console

db = WorkDB("./data/main.db")

router = Router()

console = Console()



@router.message(F.text.lower() == "–ø–æ–∏—Å–∫üîé")
async def cmd_refund(message: Message):
    
    await message.reply(f"–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç",
                        reply_markup=kb.search)


@router.message(F.text.lower() == "–ø–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º")
async def cmd_refund(message: Message, state: FSMContext):
    await state.set_state(SearchByTags.text)
    await message.reply(f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏", reply_markup=ReplyKeyboardRemove())


@router.message(SearchByTags.text)
async def find_text(message: Message, state: FSMContext):
        await state.update_data(text=message.text)
        data = await state.get_data()
        await state.clear()
        text = data.get("text").replace("'", " ").replace('"', ' ').lower()  
        await message.answer(f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º")
        res_db = db.searchRequestTags(text)
        result = []
        i = 0
        for request in res_db: 
            result += [[request[0], request[1], request[2], request[3], request[4]]]
            i +=1
        
        if i == 0:
            await message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ, –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=kb.main)
        else: 
            await message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–≥—É(–∞–º): <code>{text}</code> ", reply_markup=kb.list_requests(result))


@router.message(F.text.lower() == "–ø–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º")
async def cmd_refund(message: Message, state: FSMContext):
    await state.set_state(Search.text)
    await message.reply(f"–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤", reply_markup=ReplyKeyboardRemove())


@router.message(Search.text)
async def find_text(message: Message, state: FSMContext):
        await state.update_data(text=message.text)
        data = await state.get_data()
        text = data.get("text").replace("'", " ").replace('"', ' ').lower()
        await state.clear()
        await message.answer(f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ–∏—Å–∫: <i>{text}</i>")
        res_db = db.searchRequestText(text)
        result = []
        i = 0
        for request in res_db: 
            result += [[request[0], request[1], request[2], request[3], request[4]]]
            i +=1
        if i == 0:
            await message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ, –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=kb.main)
        else: 
            await message.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: ", reply_markup=kb.list_requests(result))


@router.callback_query(F.data[:4] == "REQ ")
async def my_requests_callback(callback: CallbackQuery):
    await callback.answer(" ")
    request = db.getRequest(callback.from_user.id, callback.data[4:]) # –ï—Å–ª–∏ –≤ –ë–î –µ—Å—Ç—å —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å , —Ç–æ –≤ request –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ  
    if request == None:                                               # –ò–ù–ê–ß–ï –æ–Ω —Ä–∞–≤–µ–Ω None - —ç—Ç–æ –∑–Ω–∞—á–∏—Ç —á—Ç–æ –≤ –ë–î –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ–Ω –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º —á—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–∞
        await callback.message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —Ç–∞–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω–æ :( ", reply_markup=kb.main) # –ú–æ–∂–µ–º –æ—Ç—Å—é–¥–∞ —ç—Ç–æ —É–±—Ä–∞—Ç—å, –∏ –±–æ—Ç –±—É–¥–µ—Ç –º–æ–ª—á–∞—Ç—å
    else:
        await callback.message.answer(f"üí†—Ç–µ–º–∞: <u>{request[0]}</u>\n‚Ä¢ {request[1]}\n \n<code>{request[2]}</code>", reply_markup=kb.interact_request([callback.data[4:], callback.from_user.id]))

      
@router.callback_query(F.data[:4] == "DEL ")
async def delete_my_requests_callback(callback: CallbackQuery):
    await callback.message.delete()
    
    data =  ast.literal_eval(callback.data[4:])
    await callback.answer(" ")
    db.deleteRequest(data[0], callback.from_user.id)
    await callback.message.answer("–í—ã —É–¥–∞–ª–∏–ª–∏ –∑–∞–ø—Ä–æ—Å")


@router.callback_query(F.data[:5] == "EDIT ")
async def edit_my_requests_callback(callback: CallbackQuery):
    data = ast.literal_eval(callback.data[5:])
    await callback.answer(" ")
    await callback.message.edit_text(f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=kb.edit_request_inline( data ))


@router.callback_query(F.data[:6] == "TITLE ")
async def edit_my_requests_callback(callback: CallbackQuery, state: FSMContext):
    data = ast.literal_eval(callback.data[6:])
    await callback.answer(" ")
    await state.set_state(Form.request_title)
    await state.update_data(id=data)
    await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–≥")


@router.message(Form.request_title)
async def new_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    data = await state.get_data()
    await state.clear()
    request_title = data.get("title")
    request_ID = data.get("id")
    db.editRequestTitle(f"{message.from_user.id}", f"{request_ID}", f"{request_title}")
    await message.answer("–¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")


@router.callback_query(F.data[:5] == "TEXT ")
async def edit_my_requests_callback(callback: CallbackQuery, state: FSMContext):
    data = ast.literal_eval(callback.data[5:])
    await callback.answer(" ")
    await state.set_state(Form.request_text)
    await state.update_data(id=data)
    await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")


@router.message(Form.request_text)
async def new_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    data = await state.get_data()
    await state.clear()
    request_text = data.get("text")
    request_ID = data.get("id")
    db.editRequestText(f"{message.from_user.id}", f"{request_ID}", f"{request_text}")
    await message.answer("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")


@router.callback_query(F.data[:5] == "TAGS ")
async def edit_my_requests_callback(callback: CallbackQuery, state: FSMContext):
    data = ast.literal_eval(callback.data[5:])
    await callback.answer(" ")
    await state.set_state(Form.request_tags)
    await state.update_data(id=data)
    await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ç–µ–≥–∏")


@router.message(Form.request_tags)
async def new_tags(message: Message, state: FSMContext):
    await state.update_data(tags=message.text)
    data = await state.get_data()
    await state.clear()
    request_tags = data.get("tags")
    request_ID = data.get("id")
    db.editRequestTags(f"{message.from_user.id}", f"{request_ID}", f"{request_tags}")
    await message.answer("–¢—ç–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")


@router.callback_query(F.data[:5] == "FIND ")
async def other_request_watch(callback: CallbackQuery):    
    data =  ast.literal_eval(callback.data[5:])
    res = db.getRequestById(data)

    try:
        await callback.message.edit_text(f"‚ùì <u>–ó–∞–ø—Ä–æ—Å –æ—Ç</u> {res[3]}: \nüí†<u>—Ç–µ–º–∞</u>: {res[4]}\n‚Ä¢ {res[5]}\n \n<code>{res[6]}</code>", reply_markup=kb.set_answer(res))
    except Exception:
        console.print_exception(show_locals=True)


@router.callback_query(F.data[:9] == "S_ANSWER ")
async def other_request_set(callback: CallbackQuery, state: FSMContext):    
    data = ast.literal_eval(callback.data[9:])
    await callback.answer(" ")
    await state.set_state(SetAnswer.text)
    await state.update_data(request_id=data)
    await callback.message.reply(f"–ü–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç")


@router.message(SetAnswer.text)
async def other_request_set(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    data = await state.get_data()
    await state.clear()
    text = data.get("text")
    id = data.get("request_id")
    dogname = "@"+message.from_user.username
    res = db.setAnswer(id, message.from_user.id, "@"+message.from_user.username, text)
    await message.reply("–í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=kb.main)

    user_req = db.getRequestById(id)[1]
    if message.from_user.id != user_req:
        title = db.getRequestById(id)[4]
        await bot.send_message(chat_id=res, text=f"–ü—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å: <b>{title}</b>\n–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{dogname}</b>", reply_markup=kb.check(id))
    else:
        print("–æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å–≤–æ–π –∂–µ –∑–∞–ø—Ä–æ—Å")
    # 
    # 


@router.callback_query(F.data[:9] == "W_ANSWER ")
async def other_request_set(callback: CallbackQuery):    
    data = ast.literal_eval(callback.data[9:])
    await callback.answer(" ")
    res_db = db.getAnswers(data)
    if not res_db:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ—Ç—É –æ—Ç–≤–µ—Ç–∞\n–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–≤—ã–º –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å?", reply_markup=kb.main)
    else:
        for answer in res_db:
            await callback.message.answer(f"‚ùï <u>–æ—Ç–≤–µ—Ç—å –æ—Ç</u>:{answer[3]} \n‚Ä¢ {answer[4]}\n \n–û—Ü–µ–Ω–∫–∞: <b>{answer[5]}</b>", reply_markup=kb.like_answer(answer[0]))


@router.callback_query(F.data[:7] == "W_A_MR ")
async def other_request_set(callback: CallbackQuery):    
    data = ast.literal_eval(callback.data[7:])
    await callback.answer(" ")
    res_db = db.getAnswers(data[0])
    if not res_db:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ—Ç—É –æ—Ç–≤–µ—Ç–∞", reply_markup=kb.main)
    else:
        for answer in res_db:
            await callback.message.answer(f"‚ùï <u>–æ—Ç–≤–µ—Ç—å –æ—Ç</u>:{answer[3]} \n‚Ä¢ {answer[4]}\n \n–û—Ü–µ–Ω–∫–∞: <b>{answer[5]}</b>", reply_markup=kb.main)

      
@router.callback_query(F.data[:6] == "DEL_A ")
async def delete_my_requests_callback(callback: CallbackQuery):
    await callback.message.delete()
    await callback.answer(" ")
    db.deleteAnswer(callback.data[6:])
    await callback.message.answer("–í—ã —É–¥–∞–ª–∏–ª–∏ –æ—Ç–≤–µ—Ç")


@router.callback_query(F.data == "Back")
async def cmd_refund_clbk(callback: CallbackQuery):
    await callback.answer(" ")
    await callback.message.delete()
    await callback.message.answer(f"–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç", reply_markup=kb.main)


@router.callback_query(F.data[:7] == "EDIT_A ")
async def edit_my_requests_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(EditMyAnswer.text)
    await state.update_data(answer_id=callback.data[7:])
    await callback.answer(" ")
    await callback.message.reply(f"–í–≤–æ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞")


@router.message(EditMyAnswer.text)
async def find_text(message: Message, state: FSMContext):
        await state.update_data(text=message.text)
        data = await state.get_data()
        await state.clear()
        text = data.get("text")
        id = data.get("answer_id")
        db.editAnswer(id, message.from_user.id, text)
        await message.reply("–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")


@router.callback_query(F.data[:5] == "LIKE ")
async def edit_my_requests_callback(callback: CallbackQuery):
    await callback.answer(" ")
    print(callback.data[5:])
    res = db.like(callback.data[5:], callback.message.chat.id)
        
    if res == True:
        await callback.message.reply(f"–õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω",  reply_markup=kb.main)
    elif res == "No Find":
        await callback.message.reply(f"–≠—Ç–æ—Ç –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π —É–∂–µ —É–¥–∞–ª–µ–Ω", reply_markup=kb.main)
    else:
        await callback.message.reply(f"–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç–æ—Ç –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π", reply_markup=kb.main)


@router.callback_query(F.data[:8] == "DISLIKE ")
async def edit_my_requests_callback(callback: CallbackQuery):
    await callback.answer(" ")
    print(callback.data[8:])
    res = db.dislike(callback.data[8:], callback.message.chat.id)
        
    if res == True:
        await callback.message.reply(f"–î–∏–∑–ª–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω",  reply_markup=kb.main)
    elif res == "No Find":
        await callback.message.reply(f"–≠—Ç–æ—Ç –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π —É–∂–µ —É–¥–∞–ª–µ–Ω", reply_markup=kb.main)
    else:
        await callback.message.reply(f"–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç–æ—Ç –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π", reply_markup=kb.main)


@router.callback_query(F.data[:6] == "CHECK ")
async def check(callback: CallbackQuery):
    await callback.answer(" ")
    res_db = db.getAnswers(callback.data[6:])
    if not res_db:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ—Ç—É –æ—Ç–≤–µ—Ç–∞\n–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–≤—ã–º –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å?", reply_markup=kb.main)
    else:
        for answer in res_db:
            await callback.message.answer(f"‚ùï <u>–æ—Ç–≤–µ—Ç—å –æ—Ç</u>:{answer[3]} \n‚Ä¢ {answer[4]}\n \n–û—Ü–µ–Ω–∫–∞: <b>{answer[5]}</b>", reply_markup=kb.like_answer(answer[0]))



"""
–†–∞–±–æ—Ç–∞ —Å –ë–î

db.getRequest(—é–∑–µ—Ä_id, id_–∑–∞–ø—Ä–æ—Å–∞)  -> –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
db.getRequests(—é–∑–µ—Ä_id)             -> –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 

db.setRequest(—é–∑–µ—Ä_id, –∏–º—è_—é–∑–µ—Ä–∞, —Å–æ–±–∞—á–∫–∞_—é–∑–µ—Ä–∞, –∑–∞–≥–æ–ª–æ–≤–æ–∫_–∑–∞–ø—Ä–æ—Å–∞, —Ç–µ–∫—Å—Ç_–∑–∞–ø—Ä–æ—Å–∞)            -> –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—å—é 

"""