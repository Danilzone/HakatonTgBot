
import ast
from aiogram  import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandObject, CommandStart

from aiogram.fsm.context import FSMContext
from utils.states import GetReqEdit
from utils.states import Form, Search

from keyboards import kb
from rich import print
from data.database import WorkDB

from keyboards.kb import my_requests
from rich.console import Console

db = WorkDB("./data/main.db")

router = Router()

console = Console()


@router.message(CommandStart())
async def start(message : Message):
    await message.answer(f"Hi <b>{message.from_user.full_name}</b>", reply_markup=kb.main)

    # db.setUser(message.from_user.id, message.from_user.full_name, "@" + message.from_user.username)    
    # db.setRequest(message.from_user.id, message.from_user.full_name, "@" + message.from_user.username, "–ú–∞–π–Ω–∏–Ω–≥", "–ö–∞–∫ –≤ –ø–∏—Ç–æ–Ω–µ —Å–¥–µ–ª–∞—Ç—å –º–∞–π–Ω–µ—Ä?")
    # db.getRequests()


@router.message(F.text.lower() == "–Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω")
async def cmd_refund(message: Message):
    await message.reply(f"–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç",
                        reply_markup=kb.main)


@router.message(F.text.lower() == "–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def cmd_refund(message: Message):
    await message.reply(f"–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç",
                        reply_markup=kb.office)


@router.message(F.text.lower() == "–º–æ–∏ –∑–∞–ø—Ä–æ—Å—ã")
async def cmd_refund(message: Message):
    try:
        res_db = db.getRequests(message.from_user.id)[1]
        await message.reply(f"–≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å", reply_markup=my_requests(res_db) )
    except Exception:
        console.print_exception(show_locals=True)



@router.message(F.text.lower() == "–ø–æ–∏—Å–∫üîé")
async def cmd_refund(message: Message):
    await message.reply(f"–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç",
                        reply_markup=kb.search)


@router.message(F.text.lower() == "–ø–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º")
async def cmd_refund(message: Message, state: FSMContext):
    await state.set_state(Search.text)
    await message.reply(f"–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤")


@router.message(Search.text)
async def find_text(message: Message, state: FSMContext):

        await state.update_data(text=message.text)
        data = await state.get_data()
        text = data.get("text")
        await message.reply(f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ–∏—Å–∫ {text}")
        
# 

@router.message(F.text.lower() == "—Ä–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞")
async def cmd_refund(message: Message):
    await message.reply(f"–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç",
                        reply_markup=kb.answer)



# –¢—É—Ç –º—ã –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –∏ –≤—ã–≤–æ–¥–∏–º –∏–∑ –±–¥ –Ω—É–∂–Ω—ã–π '–∑–∞–ø—Ä–æ—Å'

@router.callback_query(F.data[:4] == "REQ ")
async def my_requests_callback(callback: CallbackQuery):
    await callback.answer(" ")
    request = db.getRequest(callback.from_user.id, callback.data[4:]) # –ï—Å–ª–∏ –≤ –ë–î –µ—Å—Ç—å —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å , —Ç–æ –≤ request –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ  
    if request == None:                                               # –ò–ù–ê–ß–ï –æ–Ω —Ä–∞–≤–µ–Ω None - —ç—Ç–æ –∑–Ω–∞—á–∏—Ç —á—Ç–æ –≤ –ë–î –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ–Ω –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º —á—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–∞
        print("–û–π")
        await callback.message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —Ç–∞–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω–æ :( ") # –ú–æ–∂–µ–º –æ—Ç—Å—é–¥–∞ —ç—Ç–æ —É–±—Ä–∞—Ç—å, –∏ –±–æ—Ç –±—É–¥–µ—Ç –º–æ–ª—á–∞—Ç—å
    else:
        await callback.message.answer(f"üí†—Ç–µ–º–∞: <u>{request[0]}</u>\n‚Ä¢ {request[1]}", reply_markup=kb.interact_request([callback.data[4:], callback.from_user.id]))

      
@router.callback_query(F.data[:4] == "DEL ")
async def delete_my_requests_callback(callback: CallbackQuery):
    await callback.message.delete()
    
    data =  ast.literal_eval(callback.data[4:])
    await callback.answer(" ")
    db.deleteRequest(data[0], callback.from_user.id)
    await callback.message.answer("–í—ã —É–¥–∞–ª–∏–ª–∏ –∑–∞–ø—Ä–æ—Å")


@router.callback_query(F.data[:5] == "EDIT ")
async def edit_my_requests_callback(callback: CallbackQuery):
    data = ast.literal_eval(callback.data[5:])
    await callback.answer(" ")
    print(type(data))
    await callback.message.edit_text(f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=kb.edit_request_inline( data ))


@router.callback_query(F.data[:6] == "TITLE ")
async def edit_my_requests_callback(callback: CallbackQuery, state: FSMContext):
    data = ast.literal_eval(callback.data[6:])
    await callback.answer(" ")
    await state.set_state(Form.request_title)
    await state.update_data(id=data)
    await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–≥")


@router.message(Form.request_title)
async def new_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    data = await state.get_data()
    print(data)
    await state.clear()
    request_title = data.get("title")
    request_ID = data.get("id")
    print(request_title, request_ID)
    db.editRequestTitle(f"{message.from_user.id}", f"{request_ID}", f"{request_title}")
    await message.answer("–¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")


@router.callback_query(F.data[:5] == "TEXT ")
async def edit_my_requests_callback(callback: CallbackQuery, state: FSMContext):
    data = ast.literal_eval(callback.data[5:])
    await callback.answer(" ")
    await state.set_state(Form.request_text)
    await state.update_data(id=data)
    await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")


@router.message(Form.request_text)
async def new_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    data = await state.get_data()
    print(data)
    await state.clear()
    request_text = data.get("text")
    request_ID = data.get("id")
    print(request_text, request_ID)
    db.editRequestText(f"{message.from_user.id}", f"{request_ID}", f"{request_text}")
    await message.answer("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")

    

@router.callback_query(F.data[:5] == "TAGS ")
async def edit_my_requests_callback(callback: CallbackQuery, state: FSMContext):
    data = ast.literal_eval(callback.data[5:])
    await callback.answer(" ")
    await state.set_state(Form.request_tags)
    await state.update_data(id=data)
    await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ç–µ–≥–∏")


@router.message(Form.request_tags)
async def new_tags(message: Message, state: FSMContext):
    await state.update_data(tags=message.text)
    data = await state.get_data()
    print(data)
    await state.clear()
    request_tags = data.get("tags")
    request_ID = data.get("id")
    print(request_tags, request_ID)
    db.editRequestTags(f"{message.from_user.id}", f"{request_ID}", f"{request_tags}")
    await message.answer("–¢—ç–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
# 
# 

"""
–†–∞–±–æ—Ç–∞ —Å –ë–î

db.getRequest(—é–∑–µ—Ä_id, id_–∑–∞–ø—Ä–æ—Å–∞)  -> –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
db.getRequests(—é–∑–µ—Ä_id)             -> –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 

db.setRequest(—é–∑–µ—Ä_id, –∏–º—è_—é–∑–µ—Ä–∞, —Å–æ–±–∞—á–∫–∞_—é–∑–µ—Ä–∞, –∑–∞–≥–æ–ª–æ–≤–æ–∫_–∑–∞–ø—Ä–æ—Å–∞, —Ç–µ–∫—Å—Ç_–∑–∞–ø—Ä–æ—Å–∞)            -> –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—å—é 

"""